<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.spring.codelog.board.mapper.IBoardMapper">
 <resultMap type="com.spring.codelog.board.model.BoardVO" id="BoardMap">
    <id property="boardId" column="board_id" />
   <result property="userId" column="user_id" />
   <result property="writer" column="writer" />
   <result property="tags" column="tags" />
   <result property="content" column="content" />
   <result property="preview" column="preview" />
   <result property="thumbnail" column="thumbnail" />
   <result property="viewAll" column="view_all" />
   <result property="imgPath" column="img_path" />
   <result property="likes" column="likes" />
   <result property="regDate" column="reg_date" />
   <result property="hit" column="hit" />
   <result property="userNo" column="user_no" />
 </resultMap> 
 <select id="getContent" ></select>
 
 <!-- 01. 게시글 전체 목록 조회 및 검색조회까지-->
    <select id="listAll" resultMap="BoardMap">
            SELECT ROWNUM, board_id, title, content, writer, b.regDate, hit, user_id, 
                    <!-- ** 댓글숫자표시 -->
                    (SELECT COUNT(*) FROM tbl_reply WHERE board_id=b.board_id) AS recnt
            FROM proj_board b, proj_user u
            <include refid="search"></include>
            ORDER BY board_id DESC, b.regDate DESC 
    </select>
    
        <!-- sql code 조각 -->
    <!-- 반복되는 sql의 일부를 sql태그를 이용하여 따로 빼둘수 있다. -->
    <!-- 검색 조건 sql -->
    <sql id="search">
        <choose>
            <!-- 검색옵션이 전체 검색일 경우 -->
            <when test="searchOption == 'all'">
                WHERE b.writer = m.user_id
                AND    
                (user_name like '%'||#{keyword}||'%'
                OR content like '%'||#{keyword}||'%'
                OR title like '%'||#{keyword}||'%')
            </when>
            <!-- 전체 검색이 아닐 경우 -->
            <otherwise>
                WHERE b.writer = m.user_id 
                AND ${searchOption} like '%'||#{keyword}||'%'
            </otherwise>
        </choose>
    </sql>
    
    <!-- 02. 게시글 작성 -->
 
    <insert id="write"> INSERT INTO proj_board(board_id, user_id, title, writer, tags, content, img_path, reg_date,preview, thumbnail,  user_no, hit) 
VALUES(board_seq.NEXTVAL, #{userId}, #{title}, #{writer}, #{tags}, #{content}, 'dd',to_date(sysdate, 'yyyy.mm.dd hh24:mi:ss'),#{preview}, #{thumbnail},  #{userNo}, 0)</insert>

    <!--03. 게시글 상세보기 조회 -->
    <select id="read" resultMap="BoardMap">
        SELECT * FROM proj_board 
        WHERE board_id = #{boardId}
    </select>
    <!-- 04. 게시글 조회수 증가처리 -->
    <update id="increaseHit">
        UPDATE proj_board SET hit = hit + 1 
        WHERE board_id = #{boardId}
    </update>
    
    <!-- 게시글 수정 불러오기 -->
    <select id="modify" resultMap="BoardMap">
    	SELECT * FROM proj_board 
        WHERE board_id = #{boardId}
    </select>
    
    <!-- 05. 게시글 수정처리 -->
    <update id="update">
		UPDATE proj_board
		SET
		title = #{title},
		tags = #{tags},
		content = #{content},
		preview = #{preview},
		thumbnail =  #{thumbnail}
		WHERE board_id = #{boardId}
    </update>
    
    <!-- 06. 게시글 삭제처리 -->
    <delete id="delete">
        DELETE FROM proj_board
        WHERE board_id = #{boardId}
    </delete>
    
    <!-- 07. 왼쪽 프로필 사진 가져오기 -->
	<select id="writerImg">
		SELECT user_img FROM proj_user
		WHERE user_id = #{userId}
	</select>
	
	<!-- 08. 좋아요 합계 ++ (게시글 기준) -->
	<update id="totalLikeUp">
		UPDATE proj_board SET likes = likes + 1 WHERE board_id = #{boardId}
	</update>
	
	<!-- 09. 좋아요  합계 - (게시글 기준) -->
	<update id="totalLikeDown">
		UPDATE proj_board SET likes = likes - 1 WHERE board_id = #{boardId}
	</update>
	
	<!-- board_seq 시퀀스의 현재 값을 얻어오는 sql (write와 연계) -->
	<select id="currentBoardId" resultType="int">
		SELECT board_seq.CURRVAL FROM dual
	</select>
 
 	<select id="lastbno" resultType="int">
 		SELECT max(board_id)+1 FROM proj_board
 	</select>
 	
 	<!-- 회원탈퇴하는 사용자 게시물 모두 삭제 -->
 	<delete id="deleteAll">
 		DELETE FROM proj_board
 		WHERE user_id = #{userId}
 	</delete>
 	
 </mapper>
